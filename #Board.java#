import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by julianvera on 12/14/16.
 */
public class Board {

    // board size for most Checkers games
    private final int DEF_HEIGHT = 8;
    private final int DEF_WIDTH = 8;

    // spots that cannot be accessed during the game will be tagged with this string
    private final String invalid = " ";

    // this string will be used for jumping
    private final String empty = "#";

    // ArrayList<BlackPieces>
    List<BlackPiece> blackPieces = new ArrayList<BlackPiece>();

    // ArrayList<RedPieces>
    List<RedPiece> redPieces = new ArrayList<RedPiece>();

    String[][] board = new String[DEF_HEIGHT][DEF_WIDTH];

    // true if it's red's true
    private boolean redsTurn;

    Board parent;

    // can a piece be captured in this board?
    private boolean canCapture = false;

    public Board(Board parent, String[][] board, ArrayList<BlackPiece> blackPieces, ArrayList<RedPiece> redPieces, boolean redsTurn) {
        this.parent = parent;
	this.board = board;
        this.blackPieces = blackPieces;
        this.redPieces = redPieces;
	this.redsTurn = redsTurn;
    }

    // in case we need to go back up in a tree
    public Board parent() {
        return this.parent;
    }
    
    public String[][] board() {
	return this.board;
    }

    public void setBlackPieces(ArrayList<BlackPiece> pieces) {for(BlackPiece p : pieces) { board[p.x][p.y] = "b"; }
    }

    public void setRedPieces(ArrayList<RedPiece> pieces) {
        for(RedPiece p : pieces) { board[p.x][p.y] = "r"; }
    }

    /**
     * There are spaces on the board no piece can ever be. This method marks those spaces
     */
    public void setInvalidSpaces() {

        for(int i = 0; i < DEF_HEIGHT; i+=2) {
            for(int j = 1; j < DEF_WIDTH; j+=2) {
               board[i][j] = invalid;
            }
        }

        for(int x = 1; x < DEF_HEIGHT; x+=2) {
            for(int y = 0; y < DEF_WIDTH; y+=2) {
                board[x][y] = invalid;
            }
        }

    }


    // don't want null strings on the board, will makes things harder in the long run
    public void noNull() {
        for(int i = 0; i < DEF_WIDTH; i++) {
            for(int j = 0; j < DEF_HEIGHT; j++) {
                if(board[i][j] == null){ board[i][j] = empty; }
            }
        }
    }

    /**
     * @param p
     * @return true if a red piece can jump a black piece diagonally left
     */
    public boolean redCaptureLeft(RedPiece p) {
        // if it goes off the board at any point, return false
        if(p.y - 1 < 0 || p.y - 2 < 0 || p.x - 1 < 0 || p.x - 2 < 0) { return false; }
        // if the adjacent left piece is red, return false
        if(board[p.x - 1][p.y - 1].toLowerCase().equals("r")) { return false; }
        // if the adjacent piece is black, but the square to jump in is blocked, return false
        if( (board[p.x - 1][p.y - 1].toLowerCase().equals("b"))
                && (!board[p.x - 2][p.y - 2].equals(empty)) ) {
                return false;
        }
        // if there is no adjacent piece return false
        if(board[p.x - 1][p.y - 1].equals(empty)) { return false; }
        // if all the other cases fail
        return true;
    }

    /**
     * @param p
     * @return true if a red piece can jump a black piece diagonally right
     */
    public boolean redCaptureRight(RedPiece p) {
        // if it goes off the board, return false
        if(p.y + 1 > 7 || p.y + 2 > 7 || p.x - 1 < 0 || p.x - 2 < 0) { return false; }
        // if adjacent piece is red, return false
        if(board[p.x - 1][p.y + 1].toLowerCase().equals("r")) { return false; }
        // if the adjacent piece is black, but the square to jump in is blocked, return false
        if( (board[p.x - 1][p.y + 1].toLowerCase().equals("b"))
                && (!board[p.x - 2][p.y + 2].equals(empty)) ) {
                return false;
        }
        // if no adjacent piece, return false
        if(board[p.x - 1][p.y + 1].equals(empty)) { return false; }
        // if all other cases fail
        return true;
    }

    /**
     * must check whether any red pieces on the board
     * can jump a black piece
     * @return true if no red piece can jump
     */
    public boolean redCannotCapture() {
        for(RedPiece p : redPieces) {
            if(redCaptureLeft(p)){ return false; }
            if(redCaptureRight(p)){ return false; }
        }
        return true;
    }


    /**
     * @param p
     * @return true if a black piece can jump a red piece diagonally left
     */

    public boolean blackCaptureLeft(BlackPiece p) {
        // if it goes off the board at any point, return false
        if(p.y - 1 < 0 || p.y - 2 < 0 || p.x + 1 > 7 || p.x + 2 > 7) { return false; }
        // if the adjacent left piece is black, return false
        if(board[p.x + 1][p.y - 1].toLowerCase().equals("b")) { return false; }
        // if the adjacent piece is red, but the square to jump in is blocked, return false
        if( (board[p.x + 1][p.y - 1].toLowerCase().equals("r"))
                && (!board[p.x + 2][p.y - 2].equals(empty)) ) {
            return false;
        }
        // if there is no adjacent piece return false
        if(board[p.x + 1][p.y - 1].equals(empty)) { return false; }
        // all else fails
        return true;
    }


    /**
     * @param p
     * @return true if the black piece can jump a red piece diagonally right
     */
    public boolean blackCaptureRight(BlackPiece p) {
        // if it goes off the board, return false
        if(p.y + 1 > 7 || p.y + 2 > 7 || p.x + 1 > 7 || p.x + 2 > 7) { return false; }
        // if adjacent piece is black, return false
        if(board[p.x + 1][p.y + 1].toLowerCase().equals("b")) { return false; }
        // if the adjacent piece is red, but the square to jump in is blocked, return false
        if( (board[p.x + 1][p.y + 1].toLowerCase().equals("r"))
                && (!board[p.x + 2][p.y + 2].equals(empty)) ) {
            return false;
        }
        // if no adjacent piece, return false
        if(board[p.x + 1][p.y + 1].equals(empty)) { return false; }
        // all else fails
        return true;
    }


    /**
     * must check whether any red pieces on the board can jump a black piece
     * @return true if no red piece can jump
     */
    public boolean blackCannotCapture() {
        for(BlackPiece p : blackPieces) {
            if(blackCaptureLeft(p)){ return false; }
            if(blackCaptureRight(p)){ return false; }
        }
        return true;
    }

    private void setCanCapture() {
        if ( redsTurn ) { canCapture = !redCannotCapture(); }
        else { canCapture = !blackCannotCapture(); }
    }

    // crowing a piece ends the turn, even if there are possible jumps
    // always check if a piece needs to be crowned?
    public void kingRed(RedPiece p) {
        if(p.x == 0 && (p.y >= 0 && p.y < DEF_HEIGHT)) { p.isKing = true; }
        redsTurn = false;
    }

    public void kingBlack(BlackPiece p) {
        if(p.x == 7 && (p.y >= 0 && p.y < DEF_HEIGHT)) { p.isKing = true; }
        redsTurn = true;
    }

    /**
     * RED PIECES ARE MOVING UP THE BOARD!
     */

    public boolean moveRedLeft(RedPiece p) {
        // if it goes off the board at any point, return false
        if(p.y - 1 < 0 || p.x - 1 < 0) { return false; }

        // if there is no adjacent piece return false
        return (board[p.x - 1][p.y - 1].equals(empty));
    }

    public boolean moveRedRight(RedPiece p) {
        if(p.y + 1 > 7 || p.x - 1 < 0){ return false; }
        return(board[p.x - 1][p.y + 1].equals(empty));
    }

    public boolean moveRedKingRight(RedPiece p) {
	
    }
    
    /**
     * BLACK PIECES ARE MOVING DOWN THE BOARD!
     */
    public boolean moveBlackLeft(BlackPiece p) {
        // if blackJumpLeft returns true, make the jump
        if(p.y - 1 < 0 || p.x + 1 > 7) { return false; }
        return(board[p.x + 1][p.y - 1].equals(empty));
    }

    public boolean moveBlackRight(BlackPiece p) {
        // if blackJumpRight returns true, make the jump
        if(p.y + 1 > 7 || p.x + 1 > 7) { return false; }
        return(board[p.x + 1][p.y + 1].equals(empty));
    }


    public ArrayList<Board> possibleMoves() {

        ArrayList<Board> children = new ArrayList<Board>();
	String[][] newBoard;
        // need ArrayLists for black and red pieces that will be used to create new boards

        // red's turn
        if (redsTurn) {
            // if redCannotCapture, then just add all the board states with possible red moves
            if (!canCapture) {
                for (RedPiece piece : redPieces) {
                    if (moveRedLeft(piece)) {
			newBoard = copyBoard(board);
			newBoard[piece.x - 1][piece.y - 1] = board[piece.x][piece.y];
			newBoard[piece.x][piece.y] = "#";
			children.add(new Board(this, newBoard, buildBlackList(newBoard), buildRedList(newBoard), !redsTurn));
                    } 
		    if (moveRedRight(piece)) {
			newBoard = copyBoard(board);
			newBoard[piece.x - 1][piece.y + 1] = board[piece.x][piece.y];
			newBoard[piece.x][piece.y] = "#";
			children.add(new Board(this, newBoard, buildBlackList(newBoard), buildRedList(newBoard), !redsTurn));
		    }
                }
            } else {
		// TODO: Needs to handle multijumps
		for (RedPiece piece : redPieces) {
		    if (redCaptureLeft(piece)) {
			newBoard = copyBoard(board);
			newBoard[piece.x - 2][piece.y - 2] = board[piece.x][piece.y];
			newBoard[piece.x][piece.y] = "#";
			newBoard[piece.x - 1][piece.y - 1] = "#";
			Board newState = new Board(this, newBoard, buildBlackList(newBoard), buildRedList(newBoard), !redsTurn);
			while (!newState.redCannotCapture()) {
			    piece = new RedPiece(piece.x - 2, piece.y - 2);
			    if (newState.redCaptureLeft(piece)) {
				newBoard = copyBoard(newState.board());
				newBoard[piece.x - 2][piece.y - 2] = board[piece.x][piece.y];
				newBoard[piece.x][piece.y] = "#";
				newBoard[piece.x - 1][piece.y - 1] = "#";
				newState = new Board(newState, newBoard, buildBlackList(newBoard), buildRedList(newBoard), !redsTurn);
			    } else if (newState.redCaptureRight(piece)) {
				newBoard = copyBoard(newState.board());
                                newBoard[piece.x - 2][piece.y + 2] = board[piece.x][piece.y];
                                newBoard[piece.x][piece.y] = "#";
                                newBoard[piece.x - 1][piece.y + 1] = "#";
                                newState = new Board(newState, newBoard, buildBlackList(newBoard), buildRedList(newBoard), !redsTurn);
			    }
			}
			children.add(newState);
		    } 
		    if (redCaptureRight(piece)) {
			newBoard = copyBoard(board);
                        newBoard[piece.x - 2][piece.y + 2] = board[piece.x][piece.y];
                        newBoard[piece.x][piece.y] = "#";
                        newBoard[piece.x - 1][piece.y + 1] = "#";
                        Board newState = new Board(this, newBoard, buildBlackList(newBoard), buildRedList(newBoard), !redsTurn);
                        while (!newState.redCannotCapture()) {
                            piece = new RedPiece(piece.x - 2, piece.y + 2);
                            if (newState.redCaptureLeft(piece)) {
                                newBoard = copyBoard(newState.board());
                                newBoard[piece.x - 2][piece.y - 2] = board[piece.x][piece.y];
                                newBoard[piece.x][piece.y] = "#";
                                newBoard[piece.x - 1][piece.y - 1] = "#";
                                newState = new Board(newState, newBoard, buildBlackList(newBoard), buildRedList(newBoard), !redsTurn);
                            } else if (newState.redCaptureRight(piece)) {
                                newBoard = copyBoard(newState.board());
                                newBoard[piece.x - 2][piece.y + 2] = board[piece.x][piece.y];
                                newBoard[piece.x][piece.y] = "#";
                                newBoard[piece.x - 1][piece.y + 1] = "#";
                                newState = new Board(newState, newBoard, buildBlackList(newBoard), buildRedList(newBoard), !redsTurn);
			    }
			}
			children.add(newState);
		    }
		}
	    }
        } else {
	    if (!canCapture) {
		for (BlackPiece piece : blackPieces) {
		    if (moveBlackLeft(piece)) {
			newBoard = copyBoard(board);
			board[piece.x + 1][piece.y - 1] = board[piece.x][piece.y];
			board[piece.x][piece.y] = "#";
			children.add(new Board(this, newBoard, buildBlackList(newBoard), buildRedList(newBoard), !redsTurn));
		    } 
		    if (moveBlackRight(piece)) {
			newBoard = copyBoard(board);
			board[piece.x + 1][piece.y + 1] = board[piece.x][piece.y];
			board[piece.x][piece.y] = "#";
			children.add(new Board(this, newBoard, buildBlackList(newBoard), buildRedList(newBoard), !redsTurn));
		    }
		}
	    } else {
		for (BlackPiece piece : blackPieces) {
		    if (blackCaptureLeft(piece)) {
			newBoard = copyBoard(board);
                        newBoard[piece.x + 2][piece.y - 2] = board[piece.x][piece.y];
                        newBoard[piece.x][piece.y] = "#";
                        newBoard[piece.x + 1][piece.y - 1] = "#";
                        Board newState = new Board(this, newBoard, buildBlackList(newBoard), buildRedList(newBoard), !redsTurn);
                        while (!newState.blackCannotCapture()) {
                            piece = new BlackPiece(piece.x + 2, piece.y - 2);
                            if (newState.blackCaptureLeft(piece)) {
                                newBoard = copyBoard(newState.board());
                                newBoard[piece.x + 2][piece.y - 2] = board[piece.x][piece.y];
                                newBoard[piece.x][piece.y] = "#";
                                newBoard[piece.x + 1][piece.y - 1] = "#";
                                newState = new Board(newState, newBoard, buildBlackList(newBoard), buildRedList(newBoard), !redsTurn);
                            } else if (newState.blackCaptureRight(piece)) {
                                newBoard = copyBoard(newState.board());
                                newBoard[piece.x + 2][piece.y + 2] = board[piece.x][piece.y];
                                newBoard[piece.x][piece.y] = "#";
                                newBoard[piece.x + 1][piece.y + 1] = "#";
                                newState = new Board(newState, newBoard, buildBlackList(newBoard), buildRedList(newBoard), !redsTurn);
                            }
                        }
                        children.add(newState);
		    }
		    if (blackCaptureRight(piece)) {
			newBoard = copyBoard(board);
                        newBoard[piece.x + 2][piece.y + 2] = board[piece.x][piece.y];
                        newBoard[piece.x][piece.y] = "#";
                        newBoard[piece.x + 1][piece.y + 1] = "#";
                        Board newState = new Board(this, newBoard, buildBlackList(newBoard), buildRedList(newBoard), !redsTurn);
                        while (!newState.blackCannotCapture()) {
                            piece = new BlackPiece(piece.x + 2, piece.y + 2);
                            if (newState.blackCaptureLeft(piece)) {
                                newBoard = copyBoard(newState.board());
                                newBoard[piece.x + 2][piece.y - 2] = board[piece.x][piece.y];
                                newBoard[piece.x][piece.y] = "#";
                                newBoard[piece.x + 1][piece.y - 1] = "#";
                                newState = new Board(newState, newBoard, buildBlackList(newBoard), buildRedList(newBoard), !redsTurn);
                            } else if (newState.blackCaptureRight(piece)) {
                                newBoard = copyBoard(newState.board());
                                newBoard[piece.x + 2][piece.y + 2] = board[piece.x][piece.y];
                                newBoard[piece.x][piece.y] = "#";
                                newBoard[piece.x + 1][piece.y + 1] = "#";
                                newState = new Board(newState, newBoard, buildBlackList(newBoard), buildRedList(newBoard), !redsTurn);
                            }
                        }
                        children.add(newState);
		    }
		}
	    }
	}
        return children;
    }

    
    private String[][] copyBoard(String[][] b) {
	String [][] newBoard = new String[8][8];
	for (int i = 0; i < 8; i++) {
	    for (int j = 0; j < 8; j++) {
		newBoard[i][j] = b[i][j];
	    }
	}
	return newBoard;
    }

    private ArrayList<RedPiece> buildRedList (String[][] b) {
	ArrayList<RedPiece> redList = new ArrayList<RedPiece>();
	for (int i = 0; i < 8; i++) {
	    for (int j = 0; j < 8; j++) {
		if (b[i][j].toLowerCase().equals("r")) {
		    redList.add(new RedPiece(i, j));
		}
	    }
	}
	return redList;
    }

    private ArrayList<BlackPiece> buildBlackList (String[][] b) {
	ArrayList<BlackPiece> blackList = new ArrayList<BlackPiece>();
	for (int i = 0; i < 8; i++) {
	    for (int j = 0; j < 8; j++) {
		if (b[i][j].toLowerCase().equals("b")) {
		    blackList.add(new BlackPiece(i, j));
		}
	    }
	}
	return blackList;
    }

        /**
         * TESTING
         */

    public void printBoard() {
        for(int i = 0; i < DEF_HEIGHT; i++) {
            for(int j = 0; j < DEF_WIDTH; j++) {
                System.out.print(board[i][j] + "  ");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        ArrayList<RedPiece> reds = new ArrayList<RedPiece>();
        ArrayList<BlackPiece> blacks = new ArrayList<BlackPiece>();

        Board a = new Board(null, new String[8][8], blacks,reds, true);
        for(int i = 0; i < 3; i += 2){
            for(int j = 0; j < a.board[0].length; j += 2 ) {
                blacks.add(new BlackPiece(i,j));
            }
        }

        for(int i = 1; i < a.board[0].length; i += 2) {
            blacks.add(new BlackPiece(1,i));
        }

        for(int i = 5; i < 8; i += 2){
            for(int j = 1; j < a.board[0].length; j += 2 ) {
                reds.add(new RedPiece(i,j));
            }
        }

        for(int i = 0; i < 8; i += 2) {
            reds.add(new RedPiece(6,i));
        }

        a.setBlackPieces(blacks);
        a.setRedPieces(reds);
        a.setInvalidSpaces();
        a.noNull();
        a.printBoard();
	ArrayList<Board> adjacent = a.possibleMoves();
	for (Board b : adjacent) {
	    b.printBoard();
	}
	
        System.out.println(a.redCannotCapture());
        System.out.println(a.blackCannotCapture());

    }

}
